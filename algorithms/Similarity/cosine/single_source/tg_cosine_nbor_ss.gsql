CREATE QUERY tg_cosine_nbor_ss (VERTEX source, SET<STRING> e_type_set, SET<STRING> reverse_e_type_set, STRING weight_attribute, INT top_k, INT print_limit,
  BOOL print_results = TRUE, STRING file_path = "", STRING similarity_edge = "") RETURNS (MapAccum<VERTEX, FLOAT>)  SYNTAX V1 {

    /*
    First Author: <First Author Name>
    First Commit Date:  <First Commit Date>

    Recent Author: <Recent Commit Author Name>
    Recent Commit Date: <Recent Commit Date>


    Repository:
        https://github.com/tigergraph/gsql-graph-algorithms/tree/master/algorithms/Similarity

    Maturity:
        production

    Description: 
        This query calculates the Cosine Similarity between a given vertex and every other vertex.
        Cosine similarity = A \dot B / ||A|| \dot ||B||

    Publications:
        NA

    TigerGraph Documentation:
        https://docs.tigergraph.com/graph-ml/current/similarity-algorithms/cosine-similarity-of-neighborhoods-single-source

    Parameters:
        source:
            start vertex types
        e_type_set:
            edge type to traverse
        reverse_e_type_set:
            reverse edge type to traverse
        weight_attribute:
            edge attribute that holds the weight
        top_k:
            top scores to report
        print_limit:
            limit the number of vertices printed
        print_results:
            If True, print JSON output
        file_path:
            file to write CSV output to
        similarity_edge:
            edge type for storing vertex-vertex similarity scores
    */


  SumAccum<FLOAT> @sum_numerator, @@sum_norm1, @sum_norm2, @sum_similarity;
  MapAccum<VERTEX, FLOAT> @@top_k_result_map;
  FILE f (file_path);


  start = {source};
  subjects = SELECT t
             FROM start:s -(e_type_set:e)- :t
             ACCUM t.@sum_numerator = e.getAttr(weight_attribute, "FLOAT"),
                   @@sum_norm1 += pow(e.getAttr(weight_attribute, "FLOAT"), 2);

  neighbours = SELECT t
               FROM subjects:s -(reverse_e_type_set:e)-:t
               WHERE t != source
               ACCUM t.@sum_numerator += s.@sum_numerator * e.getAttr(weight_attribute, "FLOAT");

  neighbours = SELECT s
               FROM neighbours:s -(e_type_set:e)- :t
               ACCUM s.@sum_norm2 += pow(e.getAttr(weight_attribute, "FLOAT"), 2)
               POST-ACCUM s.@sum_similarity = s.@sum_numerator/sqrt(@@sum_norm1 * s.@sum_norm2)
               ORDER BY s.@sum_similarity DESC
               LIMIT top_k;

  neighbours = SELECT s
               FROM neighbours:s
               POST-ACCUM
                 IF similarity_edge != "" THEN
                     INSERT INTO EDGE similarity_edge VALUES(source, s, s.@sum_similarity)
                 END,

                 IF file_path != "" THEN
                     f.println(source, s, s.@sum_similarity)
                 END,
                 IF print_results THEN
                     @@top_k_result_map += (s -> s.@sum_similarity)
                 END
               LIMIT print_limit;

  IF print_results THEN
      PRINT neighbours[neighbours.@sum_similarity];
  END;

  RETURN @@top_k_result_map;
}
