CREATE QUERY tg_knn_cosine_cv (SET<STRING> v_type_set, SET<STRING> e_type_set, SET<STRING> reverse_e_type_set, STRING weight_attribute, STRING label, INT min_k, INT max_k) RETURNS (INT) SYNTAX V1 {

    /*
    First Author: <First Author Name>
    First Commit Date:  <First Commit Date>

    Recent Author: <Recent Commit Author Name>
    Recent Commit Date: <Recent Commit Date>


    Repository:
        https://github.com/tigergraph/gsql-graph-algorithms/tree/master/algorithms/Classification

    Maturity:
        Production

    Description: 
        Leave-one-out cross validation for selecting optimal k. 
        The input is a range of k, output is the k with highest correct prediction rate.
        Note: When one vertex has no neighbor with known label, the prediction is considered false

    Publications:
        NA

    TigerGraph Documentation:
        https://docs.tigergraph.com/graph-ml/current/classification-algorithms/k-nearest-neighbors-cross-validation

    Parameters:
        v_type_set:
            Vertex types to calculate distance to source vertex for
        e_type_set:
            Edge types to traverse
        reverse_e_type_set:
            Reverse edge types to traverse
        weight_attribute:
            Edge attribute to use as the weight of the edge
        label:
            Vertex attribute to recognize as the label of the vertex
        min_k:
            lower bound of k (inclusive)
        max_k:
            upper bound of k (inclusive)
    */

    ListAccum<FLOAT> @@correct_rate_list; 
    ListAccum<INT> @is_correct_list; 
    ListAccum<STRING> @predicted_label_list;
    SumAccum<FLOAT> @@sum_total_score;
    INT n, k, best_k=1;
    FLOAT max_rate=0;
  
    IF max_k < min_k OR max_k < 1 THEN  // terminate if the range is invalid
        RETURN 0;
    END;
    start = {v_type_set};
    start = SELECT s
            FROM start:s 
            WHERE s.getAttr(label, "STRING") != ""  // get the vertices with known label
            ACCUM s.@predicted_label_list = tg_knn_cosine_cv_sub(s, e_type_set, reverse_e_type_set, label, weight_attribute, max_k)  
	    // get a list of predicted label wrt different k
            POST-ACCUM 
	        FOREACH pred_label IN s.@predicted_label_list DO
                    IF s.getAttr(label, "STRING") == pred_label THEN  # *vStrAttrOld*  means no neighbor with label
                        s.@is_correct_list += 1
                    ELSE
                        s.@is_correct_list += 0
                    END                   
                END;
  
     n = start.size();
     k = min_k-1;  # index starts from 0
     WHILE k < max_k DO
         @@sum_total_score = 0;
         start = SELECT s
                 FROM start:s 
                 ACCUM 
		     IF s.@is_correct_list.size()==0 THEN
                         @@sum_total_score += 0  # if there is no neighbor, it is considered incorrect prediction
                     ELSE IF k >= s.@is_correct_list.size() THEN
                         @@sum_total_score += s.@is_correct_list.get(s.@is_correct_list.size()-1)   # use all neighbors it has when it is not enough  
                     ELSE 
                         @@sum_total_score += s.@is_correct_list.get(k)
                     END;
         @@correct_rate_list += @@sum_total_score / n;
         IF @@sum_total_score / n > max_rate THEN
             max_rate = @@sum_total_score / n;  # store the max correct rate in max_rate
             best_k = k+1;
         END;
         k = k+1;
     END;

     PRINT @@correct_rate_list;
     PRINT best_k;
     RETURN best_k;
}
